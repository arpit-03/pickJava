/*     */ package edu.mines.jtk.interp;
/*     */ 
/*     */ import edu.mines.jtk.dsp.Sampling;
/*     */ import edu.mines.jtk.util.ArrayMath;
/*     */ import edu.mines.jtk.util.Check;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TricubicInterpolator3
/*     */ {
/*     */   private int _n1;
/*     */   private int _n2;
/*     */   private int _n3;
/*     */   private float[] _x1;
/*     */   private float[] _x2;
/*     */   private float[] _x3;
/*     */   private float[][][][][][] _a;
/*     */   private int[] _ks;
/*     */   
/*     */   public enum Method
/*     */   {
/*  54 */     MONOTONIC,
/*     */ 
/*     */ 
/*     */     
/*  58 */     SPLINE;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TricubicInterpolator3(float[] x1, float[] x2, float[] x3, float[][][] y) {
/*  71 */     this(Method.MONOTONIC, Method.MONOTONIC, Method.MONOTONIC, x1, x2, x3, y);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TricubicInterpolator3(Method method1, Method method2, Method method3, float[] x1, float[] x2, float[] x3, float[][][] y) {
/*  88 */     this(method1, method2, method3, x1.length, x2.length, x3.length, x1, x2, x3, y);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TricubicInterpolator3(Method method1, Method method2, Method method3, int n1, int n2, int n3, float[] x1, float[] x2, float[] x3, float[][][] y) {
/* 328 */     this._ks = new int[] { 0, 0, 0 }; Check.argument(ArrayMath.isMonotonic(x1), "array x1 is monotonic"); Check.argument(ArrayMath.isMonotonic(x2), "array x2 is monotonic"); Check.argument(ArrayMath.isMonotonic(x3), "array x3 is monotonic"); this._n1 = n1; this._n2 = n2; this._n3 = n3; this._x1 = ArrayMath.copy(n1, x1); this._x2 = ArrayMath.copy(n2, x2); this._x3 = ArrayMath.copy(n3, x3); this._a = makeCoefficients(method1, method2, method3, n1, n2, n3, x1, x2, x3, y);
/*     */   }
/*     */   public float interpolate(float x1, float x2, float x3) { return interpolate000(x1, x2, x3); }
/* 331 */   public float interpolate000(float x1, float x2, float x3) { return interpolate000(x1, x2, x3, this._ks); } public float interpolate100(float x1, float x2, float x3) { return interpolate100(x1, x2, x3, this._ks); } public float interpolate010(float x1, float x2, float x3) { return interpolate010(x1, x2, x3, this._ks); } public float interpolate001(float x1, float x2, float x3) { return interpolate001(x1, x2, x3, this._ks); } public float[][][] interpolate(Sampling s1, Sampling s2, Sampling s3) { return interpolate000(s1, s2, s3); } public float[][][] interpolate000(Sampling s1, Sampling s2, Sampling s3) { int n1 = s1.getCount(); int n2 = s2.getCount(); int n3 = s3.getCount(); float[][][] y = new float[n3][n2][n1]; interpolate000(s1, s2, s3, y); return y; } private static int index(float x, float[] xs, int i) { i = ArrayMath.binarySearch(xs, x, i);
/* 332 */     if (i < 0)
/* 333 */       i = (i < -1) ? (-2 - i) : 0; 
/* 334 */     if (i >= xs.length - 1)
/* 335 */       i = xs.length - 2; 
/* 336 */     return i; }
/*     */   public void interpolate(Sampling s1, Sampling s2, Sampling s3, float[][][] y) { interpolate000(s1, s2, s3, y); }
/*     */   public void interpolate000(Sampling s1, Sampling s2, Sampling s3, float[][][] y) { int n1 = s1.getCount(); int n2 = s2.getCount(); int n3 = s3.getCount(); int[] k1 = makeIndices(s1, this._x1); int[] k2 = makeIndices(s2, this._x2); int[] k3 = makeIndices(s3, this._x3); for (int i3 = 0; i3 < n3; i3++) { float x3 = (float)s3.getValue(i3); for (int i2 = 0; i2 < n2; i2++) { float x2 = (float)s2.getValue(i2); for (int i1 = 0; i1 < n1; i1++) { float x1 = (float)s1.getValue(i1); y[i3][i2][i1] = interpolate000(x1, x2, x3, k1[i1], k2[i2], k3[i3]); }  }  }  }
/*     */   public float[][][] interpolate(float[] x1, float[] x2, float[] x3) { return interpolate000(x1, x2, x3); }
/* 340 */   public float[][][] interpolate000(float[] x1, float[] x2, float[] x3) { int n1 = x1.length; int n2 = x2.length; int n3 = x3.length; float[][][] y = new float[n3][n2][n1]; interpolate000(x1, x2, x3, y); return y; } public void interpolate(float[] x1, float[] x2, float[] x3, float[][][] y) { interpolate000(x1, x2, x3, y); } public void interpolate000(float[] x1, float[] x2, float[] x3, float[][][] y) { int n1 = x1.length; int n2 = x2.length; int n3 = x3.length; int[] k1 = makeIndices(x1, this._x1); int[] k2 = makeIndices(x2, this._x2); int[] k3 = makeIndices(x3, this._x3); for (int i3 = 0; i3 < n3; i3++) { for (int i2 = 0; i2 < n2; i2++) { for (int i1 = 0; i1 < n1; i1++) y[i3][i2][i1] = interpolate000(x1[i1], x2[i2], x3[i3], k1[i1], k2[i2], k3[i3]);  }  }  } private static void trace(String s) { System.out.println(s); } private void updateIndices(float x1, float x2, float x3, int[] ks) { ks[0] = index(x1, this._x1, ks[0]);
/* 341 */     ks[1] = index(x2, this._x2, ks[1]);
/* 342 */     ks[2] = index(x3, this._x3, ks[2]); }
/*     */ 
/*     */   
/*     */   private static int[] makeIndices(float[] xi, float[] xs) {
/* 346 */     int n = xi.length;
/* 347 */     int[] ki = new int[n];
/* 348 */     ki[0] = index(xi[0], xs, 0);
/* 349 */     for (int i = 1; i < n; i++)
/* 350 */       ki[i] = index(xi[i], xs, ki[i - 1]); 
/* 351 */     return ki;
/*     */   }
/*     */   private static int[] makeIndices(Sampling si, float[] xs) {
/* 354 */     int n = si.getCount();
/* 355 */     int[] ki = new int[n];
/* 356 */     ki[0] = index((float)si.getValue(0), xs, 0);
/* 357 */     for (int i = 1; i < n; i++)
/* 358 */       ki[i] = index((float)si.getValue(i), xs, ki[i - 1]); 
/* 359 */     return ki;
/*     */   }
/*     */   
/*     */   private float interpolate000(float x1, float x2, float x3, int[] ks) {
/* 363 */     updateIndices(x1, x2, x3, ks);
/* 364 */     return interpolate000(x1, x2, x3, ks[0], ks[1], ks[2]);
/*     */   }
/*     */   private float interpolate100(float x1, float x2, float x3, int[] ks) {
/* 367 */     updateIndices(x1, x2, x3, ks);
/* 368 */     return interpolate100(x1, x2, x3, ks[0], ks[1], ks[2]);
/*     */   }
/*     */   private float interpolate010(float x1, float x2, float x3, int[] ks) {
/* 371 */     updateIndices(x1, x2, x3, ks);
/* 372 */     return interpolate010(x1, x2, x3, ks[0], ks[1], ks[2]);
/*     */   }
/*     */   private float interpolate001(float x1, float x2, float x3, int[] ks) {
/* 375 */     updateIndices(x1, x2, x3, ks);
/* 376 */     return interpolate001(x1, x2, x3, ks[0], ks[1], ks[2]);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private float interpolate000(float x1, float x2, float x3, int k1, int k2, int k3) {
/* 382 */     return eval000(this._a[k3][k2][k1], x1 - this._x1[k1], x2 - this._x2[k2], x3 - this._x3[k3]);
/*     */   }
/*     */ 
/*     */   
/*     */   private float interpolate100(float x1, float x2, float x3, int k1, int k2, int k3) {
/* 387 */     return eval100(this._a[k3][k2][k1], x1 - this._x1[k1], x2 - this._x2[k2], x3 - this._x3[k3]);
/*     */   }
/*     */ 
/*     */   
/*     */   private float interpolate010(float x1, float x2, float x3, int k1, int k2, int k3) {
/* 392 */     return eval010(this._a[k3][k2][k1], x1 - this._x1[k1], x2 - this._x2[k2], x3 - this._x3[k3]);
/*     */   }
/*     */ 
/*     */   
/*     */   private float interpolate001(float x1, float x2, float x3, int k1, int k2, int k3) {
/* 397 */     return eval001(this._a[k3][k2][k1], x1 - this._x1[k1], x2 - this._x2[k2], x3 - this._x3[k3]);
/*     */   }
/*     */   
/*     */   private static float eval000(float[][][] a, float d1, float d2, float d3) {
/* 401 */     float sum3 = 0.0F;
/* 402 */     for (int m3 = 3; m3 >= 0; m3--) {
/* 403 */       float sum2 = 0.0F;
/* 404 */       for (int m2 = 3; m2 >= 0; m2--) {
/* 405 */         float sum1 = 0.0F;
/* 406 */         for (int m1 = 3; m1 >= 0; m1--) {
/* 407 */           sum1 = a[m3][m2][m1] + d1 * sum1;
/*     */         }
/* 409 */         sum2 = sum1 + d2 * sum2;
/*     */       } 
/* 411 */       sum3 = sum2 + d3 * sum3;
/*     */     } 
/* 413 */     return sum3;
/*     */   }
/*     */   private static float eval100(float[][][] a, float d1, float d2, float d3) {
/* 416 */     float sum3 = 0.0F;
/* 417 */     for (int m3 = 3; m3 >= 0; m3--) {
/* 418 */       float sum2 = 0.0F;
/* 419 */       for (int m2 = 3; m2 >= 0; m2--) {
/* 420 */         float sum1 = 0.0F;
/* 421 */         for (int m1 = 3; m1 >= 1; m1--) {
/* 422 */           sum1 = m1 * a[m3][m2][m1] + d1 * sum1;
/*     */         }
/* 424 */         sum2 = sum1 + d2 * sum2;
/*     */       } 
/* 426 */       sum3 = sum2 + d3 * sum3;
/*     */     } 
/* 428 */     return sum3;
/*     */   }
/*     */   private static float eval010(float[][][] a, float d1, float d2, float d3) {
/* 431 */     float sum3 = 0.0F;
/* 432 */     for (int m3 = 3; m3 >= 0; m3--) {
/* 433 */       float sum2 = 0.0F;
/* 434 */       for (int m2 = 3; m2 >= 1; m2--) {
/* 435 */         float sum1 = 0.0F;
/* 436 */         for (int m1 = 3; m1 >= 0; m1--) {
/* 437 */           sum1 = m2 * a[m3][m2][m1] + d1 * sum1;
/*     */         }
/* 439 */         sum2 = sum1 + d2 * sum2;
/*     */       } 
/* 441 */       sum3 = sum2 + d3 * sum3;
/*     */     } 
/* 443 */     return sum3;
/*     */   }
/*     */   private static float eval001(float[][][] a, float d1, float d2, float d3) {
/* 446 */     float sum3 = 0.0F;
/* 447 */     for (int m3 = 3; m3 >= 1; m3--) {
/* 448 */       float sum2 = 0.0F;
/* 449 */       for (int m2 = 3; m2 >= 0; m2--) {
/* 450 */         float sum1 = 0.0F;
/* 451 */         for (int m1 = 3; m1 >= 0; m1--) {
/* 452 */           sum1 = m3 * a[m3][m2][m1] + d1 * sum1;
/*     */         }
/* 454 */         sum2 = sum1 + d2 * sum2;
/*     */       } 
/* 456 */       sum3 = sum2 + d3 * sum3;
/*     */     } 
/* 458 */     return sum3;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 463 */   private static final float[][] AINV = new float[][] { { 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { -3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { -3.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 9.0F, -9.0F, -9.0F, 9.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, 3.0F, -6.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, -6.0F, 3.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, 2.0F, 2.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { -6.0F, 6.0F, 6.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, -3.0F, 3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, 4.0F, -2.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -2.0F, -1.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 2.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { -6.0F, 6.0F, 6.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, -2.0F, 4.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 3.0F, -3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -1.0F, -2.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 4.0F, -4.0F, -4.0F, 4.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 2.0F, -2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, -2.0F, 2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 9.0F, -9.0F, -9.0F, 9.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, 3.0F, -6.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, -6.0F, 3.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, 2.0F, 2.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -6.0F, 6.0F, 6.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, -3.0F, 3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, 4.0F, -2.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -2.0F, -1.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -6.0F, 6.0F, 6.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, -2.0F, 4.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 3.0F, -3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -1.0F, -2.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, -4.0F, -4.0F, 4.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 2.0F, -2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, -2.0F, 2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { -3.0F, 0.0F, 0.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, 0.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 9.0F, -9.0F, 0.0F, 0.0F, -9.0F, 9.0F, 0.0F, 0.0F, 6.0F, 3.0F, 0.0F, 0.0F, -6.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, -6.0F, 0.0F, 0.0F, 3.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, 2.0F, 0.0F, 0.0F, 2.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { -6.0F, 6.0F, 0.0F, 0.0F, 6.0F, -6.0F, 0.0F, 0.0F, -3.0F, -3.0F, 0.0F, 0.0F, 3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, 4.0F, 0.0F, 0.0F, -2.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -2.0F, 0.0F, 0.0F, -1.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, 0.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, 0.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 9.0F, -9.0F, 0.0F, 0.0F, -9.0F, 9.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, 3.0F, 0.0F, 0.0F, -6.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, -6.0F, 0.0F, 0.0F, 3.0F, -3.0F, 0.0F, 0.0F, 4.0F, 2.0F, 0.0F, 0.0F, 2.0F, 1.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -6.0F, 6.0F, 0.0F, 0.0F, 6.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, -3.0F, 0.0F, 0.0F, 3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, 4.0F, 0.0F, 0.0F, -2.0F, 2.0F, 0.0F, 0.0F, -2.0F, -2.0F, 0.0F, 0.0F, -1.0F, -1.0F, 0.0F, 0.0F }, { 9.0F, 0.0F, -9.0F, 0.0F, -9.0F, 0.0F, 9.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, 0.0F, 3.0F, 0.0F, -6.0F, 0.0F, -3.0F, 0.0F, 6.0F, 0.0F, -6.0F, 0.0F, 3.0F, 0.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 2.0F, 0.0F, 2.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 9.0F, 0.0F, -9.0F, 0.0F, -9.0F, 0.0F, 9.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F, 0.0F, 3.0F, 0.0F, -6.0F, 0.0F, -3.0F, 0.0F, 6.0F, 0.0F, -6.0F, 0.0F, 3.0F, 0.0F, -3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, 0.0F, 2.0F, 0.0F, 2.0F, 0.0F, 1.0F, 0.0F }, { -27.0F, 27.0F, 27.0F, -27.0F, 27.0F, -27.0F, -27.0F, 27.0F, -18.0F, -9.0F, 18.0F, 9.0F, 18.0F, 9.0F, -18.0F, -9.0F, -18.0F, 18.0F, -9.0F, 9.0F, 18.0F, -18.0F, 9.0F, -9.0F, -18.0F, 18.0F, 18.0F, -18.0F, -9.0F, 9.0F, 9.0F, -9.0F, -12.0F, -6.0F, -6.0F, -3.0F, 12.0F, 6.0F, 6.0F, 3.0F, -12.0F, -6.0F, 12.0F, 6.0F, -6.0F, -3.0F, 6.0F, 3.0F, -12.0F, 12.0F, -6.0F, 6.0F, -6.0F, 6.0F, -3.0F, 3.0F, -8.0F, -4.0F, -4.0F, -2.0F, -4.0F, -2.0F, -2.0F, -1.0F }, { 18.0F, -18.0F, -18.0F, 18.0F, -18.0F, 18.0F, 18.0F, -18.0F, 9.0F, 9.0F, -9.0F, -9.0F, -9.0F, -9.0F, 9.0F, 9.0F, 12.0F, -12.0F, 6.0F, -6.0F, -12.0F, 12.0F, -6.0F, 6.0F, 12.0F, -12.0F, -12.0F, 12.0F, 6.0F, -6.0F, -6.0F, 6.0F, 6.0F, 6.0F, 3.0F, 3.0F, -6.0F, -6.0F, -3.0F, -3.0F, 6.0F, 6.0F, -6.0F, -6.0F, 3.0F, 3.0F, -3.0F, -3.0F, 8.0F, -8.0F, 4.0F, -4.0F, 4.0F, -4.0F, 2.0F, -2.0F, 4.0F, 4.0F, 2.0F, 2.0F, 2.0F, 2.0F, 1.0F, 1.0F }, { -6.0F, 0.0F, 6.0F, 0.0F, 6.0F, 0.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, 3.0F, 0.0F, -4.0F, 0.0F, 4.0F, 0.0F, -2.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -6.0F, 0.0F, 6.0F, 0.0F, 6.0F, 0.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, 3.0F, 0.0F, -4.0F, 0.0F, 4.0F, 0.0F, -2.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, -1.0F, 0.0F }, { 18.0F, -18.0F, -18.0F, 18.0F, -18.0F, 18.0F, 18.0F, -18.0F, 12.0F, 6.0F, -12.0F, -6.0F, -12.0F, -6.0F, 12.0F, 6.0F, 9.0F, -9.0F, 9.0F, -9.0F, -9.0F, 9.0F, -9.0F, 9.0F, 12.0F, -12.0F, -12.0F, 12.0F, 6.0F, -6.0F, -6.0F, 6.0F, 6.0F, 3.0F, 6.0F, 3.0F, -6.0F, -3.0F, -6.0F, -3.0F, 8.0F, 4.0F, -8.0F, -4.0F, 4.0F, 2.0F, -4.0F, -2.0F, 6.0F, -6.0F, 6.0F, -6.0F, 3.0F, -3.0F, 3.0F, -3.0F, 4.0F, 2.0F, 4.0F, 2.0F, 2.0F, 1.0F, 2.0F, 1.0F }, { -12.0F, 12.0F, 12.0F, -12.0F, 12.0F, -12.0F, -12.0F, 12.0F, -6.0F, -6.0F, 6.0F, 6.0F, 6.0F, 6.0F, -6.0F, -6.0F, -6.0F, 6.0F, -6.0F, 6.0F, 6.0F, -6.0F, 6.0F, -6.0F, -8.0F, 8.0F, 8.0F, -8.0F, -4.0F, 4.0F, 4.0F, -4.0F, -3.0F, -3.0F, -3.0F, -3.0F, 3.0F, 3.0F, 3.0F, 3.0F, -4.0F, -4.0F, 4.0F, 4.0F, -2.0F, -2.0F, 2.0F, 2.0F, -4.0F, 4.0F, -4.0F, 4.0F, -2.0F, 2.0F, -2.0F, 2.0F, -2.0F, -2.0F, -2.0F, -2.0F, -1.0F, -1.0F, -1.0F, -1.0F }, { 2.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { -6.0F, 6.0F, 0.0F, 0.0F, 6.0F, -6.0F, 0.0F, 0.0F, -4.0F, -2.0F, 0.0F, 0.0F, 4.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 3.0F, 0.0F, 0.0F, -3.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 4.0F, -4.0F, 0.0F, 0.0F, -4.0F, 4.0F, 0.0F, 0.0F, 2.0F, 2.0F, 0.0F, 0.0F, -2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, -2.0F, 0.0F, 0.0F, 2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -6.0F, 6.0F, 0.0F, 0.0F, 6.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, -2.0F, 0.0F, 0.0F, 4.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -3.0F, 3.0F, 0.0F, 0.0F, -3.0F, 3.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F, -2.0F, -1.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, -4.0F, 0.0F, 0.0F, -4.0F, 4.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 2.0F, 0.0F, 0.0F, -2.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, -2.0F, 0.0F, 0.0F, 2.0F, -2.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F }, { -6.0F, 0.0F, 6.0F, 0.0F, 6.0F, 0.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, 0.0F, -2.0F, 0.0F, 4.0F, 0.0F, 2.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -6.0F, 0.0F, 6.0F, 0.0F, 6.0F, 0.0F, -6.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -4.0F, 0.0F, -2.0F, 0.0F, 4.0F, 0.0F, 2.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, -3.0F, 0.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F, -2.0F, 0.0F, -1.0F, 0.0F }, { 18.0F, -18.0F, -18.0F, 18.0F, -18.0F, 18.0F, 18.0F, -18.0F, 12.0F, 6.0F, -12.0F, -6.0F, -12.0F, -6.0F, 12.0F, 6.0F, 12.0F, -12.0F, 6.0F, -6.0F, -12.0F, 12.0F, -6.0F, 6.0F, 9.0F, -9.0F, -9.0F, 9.0F, 9.0F, -9.0F, -9.0F, 9.0F, 8.0F, 4.0F, 4.0F, 2.0F, -8.0F, -4.0F, -4.0F, -2.0F, 6.0F, 3.0F, -6.0F, -3.0F, 6.0F, 3.0F, -6.0F, -3.0F, 6.0F, -6.0F, 3.0F, -3.0F, 6.0F, -6.0F, 3.0F, -3.0F, 4.0F, 2.0F, 2.0F, 1.0F, 4.0F, 2.0F, 2.0F, 1.0F }, { -12.0F, 12.0F, 12.0F, -12.0F, 12.0F, -12.0F, -12.0F, 12.0F, -6.0F, -6.0F, 6.0F, 6.0F, 6.0F, 6.0F, -6.0F, -6.0F, -8.0F, 8.0F, -4.0F, 4.0F, 8.0F, -8.0F, 4.0F, -4.0F, -6.0F, 6.0F, 6.0F, -6.0F, -6.0F, 6.0F, 6.0F, -6.0F, -4.0F, -4.0F, -2.0F, -2.0F, 4.0F, 4.0F, 2.0F, 2.0F, -3.0F, -3.0F, 3.0F, 3.0F, -3.0F, -3.0F, 3.0F, 3.0F, -4.0F, 4.0F, -2.0F, 2.0F, -4.0F, 4.0F, -2.0F, 2.0F, -2.0F, -2.0F, -1.0F, -1.0F, -2.0F, -2.0F, -1.0F, -1.0F }, { 4.0F, 0.0F, -4.0F, 0.0F, -4.0F, 0.0F, 4.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, -2.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 4.0F, 0.0F, -4.0F, 0.0F, -4.0F, 0.0F, 4.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, -2.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, 2.0F, 0.0F, -2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F }, { -12.0F, 12.0F, 12.0F, -12.0F, 12.0F, -12.0F, -12.0F, 12.0F, -8.0F, -4.0F, 8.0F, 4.0F, 8.0F, 4.0F, -8.0F, -4.0F, -6.0F, 6.0F, -6.0F, 6.0F, 6.0F, -6.0F, 6.0F, -6.0F, -6.0F, 6.0F, 6.0F, -6.0F, -6.0F, 6.0F, 6.0F, -6.0F, -4.0F, -2.0F, -4.0F, -2.0F, 4.0F, 2.0F, 4.0F, 2.0F, -4.0F, -2.0F, 4.0F, 2.0F, -4.0F, -2.0F, 4.0F, 2.0F, -3.0F, 3.0F, -3.0F, 3.0F, -3.0F, 3.0F, -3.0F, 3.0F, -2.0F, -1.0F, -2.0F, -1.0F, -2.0F, -1.0F, -2.0F, -1.0F }, { 8.0F, -8.0F, -8.0F, 8.0F, -8.0F, 8.0F, 8.0F, -8.0F, 4.0F, 4.0F, -4.0F, -4.0F, -4.0F, -4.0F, 4.0F, 4.0F, 4.0F, -4.0F, 4.0F, -4.0F, -4.0F, 4.0F, -4.0F, 4.0F, 4.0F, -4.0F, -4.0F, 4.0F, 4.0F, -4.0F, -4.0F, 4.0F, 2.0F, 2.0F, 2.0F, 2.0F, -2.0F, -2.0F, -2.0F, -2.0F, 2.0F, 2.0F, -2.0F, -2.0F, 2.0F, 2.0F, -2.0F, -2.0F, 2.0F, -2.0F, 2.0F, -2.0F, 2.0F, -2.0F, 2.0F, -2.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F } };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static float[][][] getA(float[] dxs, float[][] yds) {
/* 602 */     float d1 = dxs[1];
/* 603 */     float d2 = dxs[2];
/* 604 */     float d3 = dxs[3];
/* 605 */     float[][][] a = new float[4][4][4];
/* 606 */     for (int m3 = 0, i = 0; m3 < 4; m3++) {
/* 607 */       for (int m2 = 0; m2 < 4; m2++) {
/* 608 */         for (int m1 = 0; m1 < 4; m1++, i++) {
/* 609 */           float am = 0.0F;
/* 610 */           for (int jd = 0, j = 0; jd < 8; jd++) {
/* 611 */             for (int jp = 0; jp < 8; jp++, j++) {
/* 612 */               if (AINV[i][j] != 0.0F)
/* 613 */                 am += AINV[i][j] * yds[jd][jp] * dxs[jd]; 
/*     */             } 
/*     */           } 
/* 616 */           am /= ArrayMath.pow(d1, m1) * ArrayMath.pow(d2, m2) * ArrayMath.pow(d3, m3);
/* 617 */           a[m3][m2][m1] = am;
/*     */         } 
/*     */       } 
/*     */     } 
/* 621 */     return a;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static float[][][][] makeDerivatives(Method method1, Method method2, Method method3, int n1, int n2, int n3, float[] x1, float[] x2, float[] x3, float[][][] y) {
/* 631 */     CubicInterpolator.Method cim1 = CubicInterpolator.Method.MONOTONIC;
/* 632 */     CubicInterpolator.Method cim2 = CubicInterpolator.Method.MONOTONIC;
/* 633 */     CubicInterpolator.Method cim3 = CubicInterpolator.Method.MONOTONIC;
/* 634 */     if (method1 == Method.SPLINE) cim1 = CubicInterpolator.Method.SPLINE; 
/* 635 */     if (method2 == Method.SPLINE) cim2 = CubicInterpolator.Method.SPLINE; 
/* 636 */     if (method3 == Method.SPLINE) cim3 = CubicInterpolator.Method.SPLINE; 
/* 637 */     float[][][] y000 = y;
/*     */ 
/*     */     
/* 640 */     float[][][] y100 = new float[n3][n2][n1];
/* 641 */     for (int i3 = 0; i3 < n3; i3++) {
/* 642 */       for (int i4 = 0; i4 < n2; i4++) {
/* 643 */         float[] ys = new float[n1];
/* 644 */         for (int i5 = 0; i5 < n1; i5++)
/* 645 */           ys[i5] = y[i3][i4][i5]; 
/* 646 */         CubicInterpolator ci = new CubicInterpolator(cim1, n1, x1, ys);
/* 647 */         for (int i6 = 0; i6 < n1; i6++) {
/* 648 */           y100[i3][i4][i6] = ci.interpolate1(x1[i6]);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 653 */     float[][][] y010 = new float[n3][n2][n1];
/* 654 */     for (int i = 0; i < n3; i++) {
/* 655 */       for (int i4 = 0; i4 < n1; i4++) {
/* 656 */         float[] ys = new float[n2];
/* 657 */         for (int i5 = 0; i5 < n2; i5++)
/* 658 */           ys[i5] = y[i][i5][i4]; 
/* 659 */         CubicInterpolator ci = new CubicInterpolator(cim2, n2, x2, ys);
/* 660 */         for (int i6 = 0; i6 < n2; i6++) {
/* 661 */           y010[i][i6][i4] = ci.interpolate1(x2[i6]);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 666 */     float[][][] y001 = new float[n3][n2][n1];
/* 667 */     for (int i2 = 0; i2 < n2; i2++) {
/* 668 */       for (int i4 = 0; i4 < n1; i4++) {
/* 669 */         float[] ys = new float[n3];
/* 670 */         for (int i5 = 0; i5 < n3; i5++)
/* 671 */           ys[i5] = y[i5][i2][i4]; 
/* 672 */         CubicInterpolator ci = new CubicInterpolator(cim3, n3, x3, ys);
/* 673 */         for (int i6 = 0; i6 < n3; i6++) {
/* 674 */           y001[i6][i2][i4] = ci.interpolate1(x3[i6]);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 679 */     float[][][] y110 = new float[n3][n2][n1];
/* 680 */     for (int j = 0; j < n3; j++) {
/* 681 */       for (int i5 = 0; i5 < n2; i5++) {
/* 682 */         float[] ys = new float[n1];
/* 683 */         for (int i6 = 0; i6 < n1; i6++)
/* 684 */           ys[i6] = y010[j][i5][i6]; 
/* 685 */         CubicInterpolator ci = new CubicInterpolator(cim1, n1, x1, ys);
/* 686 */         for (int i7 = 0; i7 < n1; i7++)
/* 687 */           y110[j][i5][i7] = y110[j][i5][i7] + 0.5F * ci.interpolate1(x1[i7]); 
/*     */       } 
/* 689 */       for (int i4 = 0; i4 < n1; i4++) {
/* 690 */         float[] ys = new float[n2];
/* 691 */         for (int i6 = 0; i6 < n2; i6++)
/* 692 */           ys[i6] = y100[j][i6][i4]; 
/* 693 */         CubicInterpolator ci = new CubicInterpolator(cim2, n2, x2, ys);
/* 694 */         for (int i7 = 0; i7 < n2; i7++) {
/* 695 */           y110[j][i7][i4] = y110[j][i7][i4] + 0.5F * ci.interpolate1(x2[i7]);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 700 */     float[][][] y101 = new float[n3][n2][n1];
/* 701 */     for (int k = 0; k < n2; k++) {
/* 702 */       for (int i5 = 0; i5 < n3; i5++) {
/* 703 */         float[] ys = new float[n1];
/* 704 */         for (int i6 = 0; i6 < n1; i6++)
/* 705 */           ys[i6] = y001[i5][k][i6]; 
/* 706 */         CubicInterpolator ci = new CubicInterpolator(cim1, n1, x1, ys);
/* 707 */         for (int i7 = 0; i7 < n1; i7++)
/* 708 */           y101[i5][k][i7] = y101[i5][k][i7] + 0.5F * ci.interpolate1(x1[i7]); 
/*     */       } 
/* 710 */       for (int i4 = 0; i4 < n1; i4++) {
/* 711 */         float[] ys = new float[n3];
/* 712 */         for (int i6 = 0; i6 < n3; i6++)
/* 713 */           ys[i6] = y100[i6][k][i4]; 
/* 714 */         CubicInterpolator ci = new CubicInterpolator(cim3, n3, x3, ys);
/* 715 */         for (int i7 = 0; i7 < n3; i7++) {
/* 716 */           y101[i7][k][i4] = y101[i7][k][i4] + 0.5F * ci.interpolate1(x3[i7]);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 721 */     float[][][] y011 = new float[n3][n2][n1];
/* 722 */     for (int i1 = 0; i1 < n1; i1++) {
/* 723 */       for (int i5 = 0; i5 < n3; i5++) {
/* 724 */         float[] ys = new float[n2];
/* 725 */         for (int i6 = 0; i6 < n2; i6++)
/* 726 */           ys[i6] = y001[i5][i6][i1]; 
/* 727 */         CubicInterpolator ci = new CubicInterpolator(cim2, n2, x2, ys);
/* 728 */         for (int i7 = 0; i7 < n2; i7++)
/* 729 */           y011[i5][i7][i1] = y011[i5][i7][i1] + 0.5F * ci.interpolate1(x2[i7]); 
/*     */       } 
/* 731 */       for (int i4 = 0; i4 < n2; i4++) {
/* 732 */         float[] ys = new float[n3];
/* 733 */         for (int i6 = 0; i6 < n3; i6++)
/* 734 */           ys[i6] = y010[i6][i4][i1]; 
/* 735 */         CubicInterpolator ci = new CubicInterpolator(cim3, n3, x3, ys);
/* 736 */         for (int i7 = 0; i7 < n3; i7++) {
/* 737 */           y011[i7][i4][i1] = y011[i7][i4][i1] + 0.5F * ci.interpolate1(x3[i7]);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 742 */     float[][][] y111 = new float[n3][n2][n1]; int n;
/* 743 */     for (n = 0; n < n3; n++) {
/* 744 */       for (int i4 = 0; i4 < n2; i4++) {
/* 745 */         float[] ys = new float[n1];
/* 746 */         for (int i5 = 0; i5 < n1; i5++)
/* 747 */           ys[i5] = y011[n][i4][i5]; 
/* 748 */         CubicInterpolator ci = new CubicInterpolator(cim1, n1, x1, ys);
/* 749 */         for (int i6 = 0; i6 < n1; i6++)
/* 750 */           y111[n][i4][i6] = y111[n][i4][i6] + 0.3333333F * ci.interpolate1(x1[i6]); 
/*     */       } 
/*     */     } 
/* 753 */     for (n = 0; n < n3; n++) {
/* 754 */       for (int i4 = 0; i4 < n1; i4++) {
/* 755 */         float[] ys = new float[n2];
/* 756 */         for (int i5 = 0; i5 < n2; i5++)
/* 757 */           ys[i5] = y101[n][i5][i4]; 
/* 758 */         CubicInterpolator ci = new CubicInterpolator(cim2, n2, x2, ys);
/* 759 */         for (int i6 = 0; i6 < n2; i6++)
/* 760 */           y111[n][i6][i4] = y111[n][i6][i4] + 0.3333333F * ci.interpolate1(x2[i6]); 
/*     */       } 
/*     */     } 
/* 763 */     for (int m = 0; m < n2; m++) {
/* 764 */       for (int i4 = 0; i4 < n1; i4++) {
/* 765 */         float[] ys = new float[n3];
/* 766 */         for (int i5 = 0; i5 < n3; i5++)
/* 767 */           ys[i5] = y110[i5][m][i4]; 
/* 768 */         CubicInterpolator ci = new CubicInterpolator(cim3, n3, x3, ys);
/* 769 */         for (int i6 = 0; i6 < n3; i6++) {
/* 770 */           y111[i6][m][i4] = y111[i6][m][i4] + 0.3333333F * ci.interpolate1(x3[i6]);
/*     */         }
/*     */       } 
/*     */     } 
/* 774 */     return new float[][][][] { y000, y100, y010, y001, y110, y101, y011, y111 };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static float[][][][][][] makeCoefficients(Method method1, Method method2, Method method3, int n1, int n2, int n3, float[] x1, float[] x2, float[] x3, float[][][] y) {
/* 784 */     float[][][][] yd = makeDerivatives(method1, method2, method3, n1, n2, n3, x1, x2, x3, y);
/*     */     
/* 786 */     float[][][] y000 = yd[0];
/* 787 */     float[][][] y100 = yd[1];
/* 788 */     float[][][] y010 = yd[2];
/* 789 */     float[][][] y001 = yd[3];
/* 790 */     float[][][] y110 = yd[4];
/* 791 */     float[][][] y101 = yd[5];
/* 792 */     float[][][] y011 = yd[6];
/* 793 */     float[][][] y111 = yd[7];
/* 794 */     float[][][][][][] a = new float[n3 - 1][n2 - 1][n1 - 1][4][4][4];
/* 795 */     for (int i3 = 0, j3 = 1; i3 < n3 - 1; i3++, j3++) {
/* 796 */       float dx3 = x3[j3] - x3[i3];
/* 797 */       for (int i2 = 0, j2 = 1; i2 < n2 - 1; i2++, j2++) {
/* 798 */         float dx2 = x2[j2] - x2[i2];
/* 799 */         for (int i1 = 0, j1 = 1; i1 < n1 - 1; i1++, j1++) {
/* 800 */           float dx1 = x1[j1] - x1[i1];
/* 801 */           float[] dxs = { 1.0F, dx1, dx2, dx3, dx1 * dx2, dx1 * dx3, dx2 * dx3, dx1 * dx2 * dx3 };
/* 802 */           float[][] yds = { { y000[i3][i2][i1], y000[i3][i2][j1], y000[i3][j2][i1], y000[i3][j2][j1], y000[j3][i2][i1], y000[j3][i2][j1], y000[j3][j2][i1], y000[j3][j2][j1] }, { y100[i3][i2][i1], y100[i3][i2][j1], y100[i3][j2][i1], y100[i3][j2][j1], y100[j3][i2][i1], y100[j3][i2][j1], y100[j3][j2][i1], y100[j3][j2][j1] }, { y010[i3][i2][i1], y010[i3][i2][j1], y010[i3][j2][i1], y010[i3][j2][j1], y010[j3][i2][i1], y010[j3][i2][j1], y010[j3][j2][i1], y010[j3][j2][j1] }, { y001[i3][i2][i1], y001[i3][i2][j1], y001[i3][j2][i1], y001[i3][j2][j1], y001[j3][i2][i1], y001[j3][i2][j1], y001[j3][j2][i1], y001[j3][j2][j1] }, { y110[i3][i2][i1], y110[i3][i2][j1], y110[i3][j2][i1], y110[i3][j2][j1], y110[j3][i2][i1], y110[j3][i2][j1], y110[j3][j2][i1], y110[j3][j2][j1] }, { y101[i3][i2][i1], y101[i3][i2][j1], y101[i3][j2][i1], y101[i3][j2][j1], y101[j3][i2][i1], y101[j3][i2][j1], y101[j3][j2][i1], y101[j3][j2][j1] }, { y011[i3][i2][i1], y011[i3][i2][j1], y011[i3][j2][i1], y011[i3][j2][j1], y011[j3][i2][i1], y011[j3][i2][j1], y011[j3][j2][i1], y011[j3][j2][j1] }, { y111[i3][i2][i1], y111[i3][i2][j1], y111[i3][j2][i1], y111[i3][j2][j1], y111[j3][i2][i1], y111[j3][i2][j1], y111[j3][j2][i1], y111[j3][j2][j1] } };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 836 */           a[i3][i2][i1] = getA(dxs, yds);
/*     */         } 
/*     */       } 
/*     */     } 
/* 840 */     return a;
/*     */   }
/*     */ }


/* Location:              /home/arpit/Downloads/Picking-Tool-6.5.2.jar!/edu/mines/jtk/interp/TricubicInterpolator3.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */