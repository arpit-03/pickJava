/*     */ package org.apache.commons.math3.special;
/*     */ 
/*     */ import org.apache.commons.math3.util.FastMath;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Erf
/*     */ {
/*     */   private static final double X_CRIT = 0.4769362762044697D;
/*     */   
/*     */   public static double erf(double x) {
/*  66 */     if (FastMath.abs(x) > 40.0D) {
/*  67 */       return (x > 0.0D) ? 1.0D : -1.0D;
/*     */     }
/*  69 */     double ret = Gamma.regularizedGammaP(0.5D, x * x, 1.0E-15D, 10000);
/*  70 */     return (x < 0.0D) ? -ret : ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static double erfc(double x) {
/*  97 */     if (FastMath.abs(x) > 40.0D) {
/*  98 */       return (x > 0.0D) ? 0.0D : 2.0D;
/*     */     }
/* 100 */     double ret = Gamma.regularizedGammaQ(0.5D, x * x, 1.0E-15D, 10000);
/* 101 */     return (x < 0.0D) ? (2.0D - ret) : ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static double erf(double x1, double x2) {
/* 115 */     if (x1 > x2) {
/* 116 */       return -erf(x2, x1);
/*     */     }
/*     */     
/* 119 */     return (x1 < -0.4769362762044697D) ? ((x2 < 0.0D) ? (erfc(-x2) - erfc(-x1)) : (erf(x2) - erf(x1))) : ((x2 > 0.4769362762044697D && x1 > 0.0D) ? (erfc(x1) - erfc(x2)) : (erf(x2) - erf(x1)));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static double erfInv(double x) {
/* 148 */     double p, w = -FastMath.log((1.0D - x) * (1.0D + x));
/*     */ 
/*     */     
/* 151 */     if (w < 6.25D) {
/* 152 */       w -= 3.125D;
/* 153 */       p = -3.64441206401782E-21D;
/* 154 */       p = -1.6850591381820166E-19D + p * w;
/* 155 */       p = 1.28584807152564E-18D + p * w;
/* 156 */       p = 1.1157877678025181E-17D + p * w;
/* 157 */       p = -1.333171662854621E-16D + p * w;
/* 158 */       p = 2.0972767875968562E-17D + p * w;
/* 159 */       p = 6.637638134358324E-15D + p * w;
/* 160 */       p = -4.054566272975207E-14D + p * w;
/* 161 */       p = -8.151934197605472E-14D + p * w;
/* 162 */       p = 2.6335093153082323E-12D + p * w;
/* 163 */       p = -1.2975133253453532E-11D + p * w;
/* 164 */       p = -5.415412054294628E-11D + p * w;
/* 165 */       p = 1.0512122733215323E-9D + p * w;
/* 166 */       p = -4.112633980346984E-9D + p * w;
/* 167 */       p = -2.9070369957882005E-8D + p * w;
/* 168 */       p = 4.2347877827932404E-7D + p * w;
/* 169 */       p = -1.3654692000834679E-6D + p * w;
/* 170 */       p = -1.3882523362786469E-5D + p * w;
/* 171 */       p = 1.8673420803405714E-4D + p * w;
/* 172 */       p = -7.40702534166267E-4D + p * w;
/* 173 */       p = -0.006033670871430149D + p * w;
/* 174 */       p = 0.24015818242558962D + p * w;
/* 175 */       p = 1.6536545626831027D + p * w;
/* 176 */     } else if (w < 16.0D) {
/* 177 */       w = FastMath.sqrt(w) - 3.25D;
/* 178 */       p = 2.2137376921775787E-9D;
/* 179 */       p = 9.075656193888539E-8D + p * w;
/* 180 */       p = -2.7517406297064545E-7D + p * w;
/* 181 */       p = 1.8239629214389228E-8D + p * w;
/* 182 */       p = 1.5027403968909828E-6D + p * w;
/* 183 */       p = -4.013867526981546E-6D + p * w;
/* 184 */       p = 2.9234449089955446E-6D + p * w;
/* 185 */       p = 1.2475304481671779E-5D + p * w;
/* 186 */       p = -4.7318229009055734E-5D + p * w;
/* 187 */       p = 6.828485145957318E-5D + p * w;
/* 188 */       p = 2.4031110387097894E-5D + p * w;
/* 189 */       p = -3.550375203628475E-4D + p * w;
/* 190 */       p = 9.532893797373805E-4D + p * w;
/* 191 */       p = -0.0016882755560235047D + p * w;
/* 192 */       p = 0.002491442096107851D + p * w;
/* 193 */       p = -0.003751208507569241D + p * w;
/* 194 */       p = 0.005370914553590064D + p * w;
/* 195 */       p = 1.0052589676941592D + p * w;
/* 196 */       p = 3.0838856104922208D + p * w;
/* 197 */     } else if (!Double.isInfinite(w)) {
/* 198 */       w = FastMath.sqrt(w) - 5.0D;
/* 199 */       p = -2.7109920616438573E-11D;
/* 200 */       p = -2.555641816996525E-10D + p * w;
/* 201 */       p = 1.5076572693500548E-9D + p * w;
/* 202 */       p = -3.789465440126737E-9D + p * w;
/* 203 */       p = 7.61570120807834E-9D + p * w;
/* 204 */       p = -1.496002662714924E-8D + p * w;
/* 205 */       p = 2.914795345090108E-8D + p * w;
/* 206 */       p = -6.771199775845234E-8D + p * w;
/* 207 */       p = 2.2900482228026655E-7D + p * w;
/* 208 */       p = -9.9298272942317E-7D + p * w;
/* 209 */       p = 4.526062597223154E-6D + p * w;
/* 210 */       p = -1.968177810553167E-5D + p * w;
/* 211 */       p = 7.599527703001776E-5D + p * w;
/* 212 */       p = -2.1503011930044477E-4D + p * w;
/* 213 */       p = -1.3871931833623122E-4D + p * w;
/* 214 */       p = 1.0103004648645344D + p * w;
/* 215 */       p = 4.849906401408584D + p * w;
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 225 */       p = Double.POSITIVE_INFINITY;
/*     */     } 
/*     */     
/* 228 */     return p * x;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static double erfcInv(double x) {
/* 239 */     return erfInv(1.0D - x);
/*     */   }
/*     */ }


/* Location:              /home/arpit/Downloads/Picking-Tool-6.5.2.jar!/org/apache/commons/math3/special/Erf.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */